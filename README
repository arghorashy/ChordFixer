Introduction:
-------------
Ever want to learn to play a new song on the guitar?  You look up that song online and follow along, but isn't it annoying when the chords are shown on the first stanza, but not on the subsequent ones?  As if you could memorise them all that fast!  

Chord Fixer is a Chrome Exentention that will detect stanzas that are annotated and copy those annotations down to the non-annotated stanzas!  Yay! 

Installation Instructions:
--------------------------
- Open Chrome.
- Navigate to "chrome://settings/".
- Go to the extensions menu.
- Click on "Load unpacked extension..."
- Select the folder within which this README is contained.

Usage Instructions:
-------------------
- Navigate to page containing chords (only Guitar Hero and Boîte à Chansons are supported so far...).
- Notice a little icon appears in the right-hand corner of the address bar.
- If the song has any stanzas not annotated with chords, they will be filled in if there is enough information in the rest of thes song to do so.

Creating New Processors:
------------------------
- Within the assets/js/processors folder, make a copy of the model folder.  Rename it to an acronym for the website it will be used for.
- Prepend that acronym to each of the files in that folder: <acronym>_filename.
- In main.js in the root folder, add an entry to the hash table supportedPages.  The key should be the acronym and the value should be the root address of the website.  This will be used to determine what website a given page of chords belongs to.
- In main.js in the root folder, add an entry to the hash table javascriptFiles.  The key should be the acronym and the value should be the location of assets/js/processors/<acronym>/<acronym>_main.js.
- In the manifest.json, add all the newly created js files to the js list.
- In all of the files in the newly copied folder, make the following sweeping replacements:
	getChordContainer -> <acronym>_getChordContainer
	ChordLines -> <acronym>_ChordLines
	getChordContainer -> <acronym>_getChordContainer
	ChordStanza -> <acronym>_ChordStanza
- In assets/js/processors/<acronym>/<acronym>_ChordFinder.js, fill in <acronym>_getChordContainer() so that it returns the HTML element that contains the guitar chords.  This is different for each website.  Look at the source code of a few web pages to look for a pattern.  Use JQuery to come up with an algorithm for finding the correct HTML element in that pattern.
- Look through <acronym>_ChordLines.js and <acronym>_ChordStanza.js.  Delete all functions that are not prefaced with a comment mentioning the words 'override'.  Of those functions that remain, only isNotChordLine() in <acronym>_ChordStanza.js and cleanHtml() in <acronym>_ChordLines.js will likely need to be modified.


More Details:
-------------
- The program finds all the annotated stanzas and categorises them by the number of lines of text (not including lines of chords) they contain.It also extracts the annotations. Then, for each non-annotated stanza, the program inserts all of the extracted annotations for stanzas of that length.  This can result in annotations like this:

*	*	*	*	*	*	*	*	*	* INSERT CONTENT HERE

This happens because different chords might be indicated for different stanzas.  In such cases, it is not immediately clear (at least to a program) which chords apply to which non-annotated stanzas. It is up to the user to determine which chords to play, but at least they are all within eye's reach now!  ;)

Todo:
-----
- It would be nice to have something like a package for the model and each of its children, so I wouldn't need silly functions like ChordLines.newChordStanzaObject...
- The model should really be a virtual class: the class should not be instantiable (some of the functions need to be overridden for the class to work!).  Only children of the model class should be instantiable...  (Is instantiable a word???)
* Find a picture and use online .ico maker to make a better icon.
